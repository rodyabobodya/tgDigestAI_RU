import logging
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from openai import AsyncOpenAI
from CONFIG import OPENAI_API, CHECK_INTERVAL, POST_LIMIT, OPENAI_MODEL, OPENAI_MAX_TOKENS
from database import add_post, get_last_post_number, is_post_processed, create_user_tables, get_user_channels, mark_channel_as_old, get_channel_description
from ai_analyzer import generate_summary_of_best_posts

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI
client = AsyncOpenAI(api_key=OPENAI_API)

def truncate_text(text, max_tokens):
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤.
    """
    tokens = text.split()
    if len(tokens) > max_tokens:
        return " ".join(tokens[:max_tokens])
    return text

async def fetch_channel_page(channel_username):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–Ω–∞–ª–∞.
    """
    url = f"https://t.me/s/{channel_username}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –∫–∞–Ω–∞–ª—É: {response.status}")
            return await response.text()

async def get_last_posts(channel_username, limit=POST_LIMIT):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞.
    """
    try:
        html = await fetch_channel_page(channel_username)
        soup = BeautifulSoup(html, 'html.parser')
        posts = []
        for message in soup.find_all('div', class_='tgme_widget_message', limit=limit):
            post_id = message.get('data-post')
            post_content = {'id': post_id}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
            text = message.find('div', class_='tgme_widget_message_text')
            if text:
                post_content['text'] = text.get_text(strip=True)
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞
                media_types = {
                    'photo': "[–ö–∞—Ä—Ç–∏–Ω–∫–∞]",
                    'video': "[–í–∏–¥–µ–æ]",
                    'gif': "[GIF]",
                    'document': "[–§–∞–π–ª]"
                }
                post_content['text'] = "[–ú–µ–¥–∏–∞]"
                for media_type, label in media_types.items():
                    if message.find('div', class_=f'tgme_widget_message_{media_type}'):
                        post_content['text'] = label
                        break

            posts.append(post_content)
        return posts
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel_username}: {e}")
        return []

async def check_new_posts(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–∂–∏–º–æ–∫ –∏ —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.
    –î–ª—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤.
    """
    summaries = []
    new_posts_found = False

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_channels = get_user_channels(user_id)
    if not user_channels:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        return summaries, new_posts_found

    for channel in user_channels:
        channel_username = channel["username"]
        is_new_channel = channel["is_new_channel"]


        limit = 5 if is_new_channel else POST_LIMIT
        posts = await get_last_posts(channel_username, limit=limit)
        for post in posts:
            if not is_post_processed(user_id, post['id']):
                new_posts_found = True
                last_post_number = get_last_post_number(user_id) + 1
                if post['text'] in ["[–ö–∞—Ä—Ç–∏–Ω–∫–∞]", "[–í–∏–¥–µ–æ]", "[GIF]", "[–§–∞–π–ª]", "[–ú–µ–¥–∏–∞]"]:
                    summary = post['text']
                else:
                    summary = await generate_summary_of_best_posts([post], get_channel_description(user_id, channel_username))
                summaries.append(f"üì¢ –ö–∞–Ω–∞–ª: @{channel_username}\n\n{summary}")
                add_post(user_id, post['id'], post['text'], summary, last_post_number, channel_username)
                logging.info(f"–ü–æ—Å—Ç {post['id']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –±—ã–ª –Ω–æ–≤—ã–º, –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–Ω –±–æ–ª—å—à–µ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º
        if is_new_channel:
            mark_channel_as_old(user_id, channel_username)

    return summaries, new_posts_found

async def auto_update(user_id):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥.
    """
    no_posts_message_shown = False

    while True:
        summaries, new_posts_found = await check_new_posts(user_id)
        if new_posts_found:
            for summary in summaries:
                logging.info(summary)
            no_posts_message_shown = False
        elif not no_posts_message_shown:
            logging.info("–ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç :(")
            no_posts_message_shown = True

        await asyncio.sleep(CHECK_INTERVAL)

async def start_ai_main(user_id):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç AI_main –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    create_user_tables(user_id)  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await auto_update(user_id)