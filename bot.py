from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import asyncio

# –ò–º–ø–æ—Ä—Ç –Ω—É–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
from database import (
    create_user_tables, get_unread_posts, mark_posts_as_read, add_user_channel, remove_user_channel,
    get_user_channels, is_active, activate_user, deactivate_user, get_channel_description,
    add_channel_description, add_detailed_channel_description
)
from CONFIG import TELEGRAM_BOT_API
# –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –±—ã–ª –∏–º–ø–æ—Ä—Ç get_last_posts, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –µ–≥–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞
from AI_main import check_new_posts, auto_update, get_last_posts
from ai_analyzer import generate_summary_of_best_posts, remove_duplicate_summaries, is_summary_relevant, generate_digest
from channel_analyzer import create_detailed_channel_description, create_short_channel_description


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

bot = Bot(
    token=TELEGRAM_BOT_API,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class AddChannel(StatesGroup):
    waiting_for_channel = State()


def escape_md(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown.
    """
    escape_chars = ['*', '_', '`', '[', ']']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text


def get_main_keyboard(user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
    """
    if is_active(user_id):
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã")],
                [KeyboardButton(text="–î–∞–π–¥–∂–µ—Å—Ç")],
                [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")],
                [KeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")]
            ],
            resize_keyboard=True
        )
    else:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã")],
                [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")],
                [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")],
                [KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")]
            ],
            resize_keyboard=True
        )
    return keyboard


@dp.message(Command("start"))
async def send_welcome(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    user_id = message.from_user.id
    create_user_tables(user_id)  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç

    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö.\n\n"
        "üìå –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –∫–Ω–æ–ø–∫–æ–π \"–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\" –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /add_channel.\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –≤—ã–∂–∏–º–∫–∏ –ø–æ—Å—Ç–æ–≤.\n\n"
        "–°–µ–π—á–∞—Å –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å."
    )
    await message.answer(escape_md(welcome_text), reply_markup=get_main_keyboard(user_id))


@dp.message(lambda message: message.text == "–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")
async def activate_ai_main(message: Message):
    user_id = message.from_user.id

    channels = get_user_channels(user_id)
    if not channels:
        await message.answer(
            "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.",
            reply_markup=get_main_keyboard(user_id)
        )
        return

    activate_user(user_id)

    waiting_msg = await message.answer("–ò–¥–µ—Ç –∏–∑—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    summaries, new_posts_found = await check_new_posts(user_id)
    await waiting_msg.delete()

    await message.answer(
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –∏–ª–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã.",
        reply_markup=get_main_keyboard(user_id)
    )


    asyncio.create_task(auto_update(user_id))
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞".
    –¢–µ–ø–µ—Ä—å –Ω–µ –¥–µ–ª–∞–µ—Ç —Å—Ä–∞–∑—É –≤—ã–∂–∏–º–∫—É –∏–∑ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤, –∞ –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞.
    """
    user_id = message.from_user.id
    channels = get_user_channels(user_id)
    if not channels:
        await message.answer(
            escape_md("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ."),
            reply_markup=get_main_keyboard(user_id)
        )
        return

    activate_user(user_id)



@dp.message(lambda message: message.text == "–û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")
async def deactivate_ai_main(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞".
    """
    user_id = message.from_user.id
    deactivate_user(user_id)
    await message.answer(
        escape_md("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤."),
        reply_markup=get_main_keyboard(user_id)
    )


@dp.message(Command("add_channel"))
@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def add_channel_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_channel –ò–õ–ò –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª".
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞.
    """
    user_id = message.from_user.id
    if is_active(user_id):
        await message.answer(
            escape_md("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤."),
            reply_markup=get_main_keyboard(user_id)
        )
        return

    await message.answer(escape_md("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel_name):"))
    await state.set_state(AddChannel.waiting_for_channel)


@dp.message(AddChannel.waiting_for_channel)
async def add_channel_finish(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞. –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.
    """
    user_id = message.from_user.id
    channel_username = message.text.strip().replace("@", "")
    try:
        await message.answer(escape_md("–ò–¥–µ—Ç –∏–∑—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–Ω–∞–ª–∞... –ü–æ–¥–æ–∂–¥–∏—Ç–µ."))

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞ (–º–∞–∫—Å–∏–º—É–º 30)
        posts = await get_last_posts(channel_username, limit=30)

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        short_description = await create_short_channel_description(posts)
        detailed_description = await create_detailed_channel_description(posts)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_user_channel(user_id, channel_username)
        add_channel_description(user_id, channel_username, short_description)
        add_detailed_channel_description(user_id, channel_username, detailed_description)

        await message.answer(
            escape_md(f"–ö–∞–Ω–∞–ª @{channel_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.\n\n–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {short_description}"),
            reply_markup=get_main_keyboard(user_id)
        )
    except Exception as e:
        await message.answer(escape_md(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}"))
    finally:
        await state.clear()


@dp.message(Command("remove_channel"))
@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
async def remove_channel_menu(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_channel –ò–õ–ò –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤.
    """
    user_id = message.from_user.id
    if is_active(user_id):
        await message.answer(
            escape_md("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤."),
            reply_markup=get_main_keyboard(user_id)
        )
        return

    channels = get_user_channels(user_id)
    if not channels:
        await message.answer(escape_md("–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª."), reply_markup=get_main_keyboard(user_id))
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=channel["username"], callback_data=f"remove_{channel['username']}")]
        for channel in channels
    ])
    await message.answer(escape_md("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"), reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("remove_"))
async def remove_channel_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞.
    """
    user_id = callback_query.from_user.id
    if is_active(user_id):
        await callback_query.answer(escape_md("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤."))
        return

    channel_username = callback_query.data.replace("remove_", "")
    try:
        remove_user_channel(user_id, channel_username)
        await callback_query.answer(escape_md(f"–ö–∞–Ω–∞–ª @{channel_username} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö."))
    except Exception as e:
        await callback_query.answer(escape_md(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}"))

    channels = get_user_channels(user_id)
    if channels:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=ch["username"], callback_data=f"remove_{ch['username']}")]
            for ch in channels
        ])
        await callback_query.message.edit_text(escape_md("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"), reply_markup=keyboard)
    else:
        await callback_query.message.edit_text(escape_md("–í—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª."))


@dp.message(Command("list_channels"))
@dp.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
async def list_channels(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_channels –ò–õ–ò –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è.
    """
    user_id = message.from_user.id
    channels = get_user_channels(user_id)
    if not channels:
        await message.answer(escape_md("–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª."), reply_markup=get_main_keyboard(user_id))
        return

    channels_list = []
    for channel in channels:
        description = get_channel_description(user_id, channel["username"])
        channels_list.append(f"‚Ä¢ @{channel['username']}: {description if description else '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

    await message.answer(
        escape_md("üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:\n\n" + "\n".join(channels_list)),
        reply_markup=get_main_keyboard(user_id)
    )


@dp.message(Command("new"))
@dp.message(lambda message: message.text == "–ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã")
async def get_new_posts(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new –ò–õ–ò –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
    """
    user_id = message.from_user.id
    if not is_active(user_id):
        await message.answer(
            escape_md("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã."),
            reply_markup=get_main_keyboard(user_id)
        )
        return

    unread_posts = get_unread_posts(user_id)
    if not unread_posts:
        await message.answer(escape_md("–ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç."), reply_markup=get_main_keyboard(user_id))
        return

    for post in unread_posts:
        await message.answer(
            escape_md(f"üìÑ –ù–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ @{post['channel_username']}:\n\n{post['summary']}")
        )
        # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç –∏–∑ –ë–î
        mark_posts_as_read(user_id, post['id'])


@dp.message(Command("digest"))
@dp.message(lambda message: message.text == "–î–∞–π–¥–∂–µ—Å—Ç")
async def send_digest(message: Message):
    user_id = message.from_user.id
    if not is_active(user_id):
        await message.answer("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç.")
        return

    # 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    waiting_msg = await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∞–π–¥–∂–µ—Å—Ç...")

    # 2) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)
    digest_text = await generate_digest(user_id)

    # 3) –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∞–π–¥–∂–µ—Å—Ç..."
    await waiting_msg.delete()

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –¥–∞–π–¥–∂–µ—Å—Ç
    await message.answer(digest_text)


    user_id = message.from_user.id
    if not is_active(user_id):
        await message.answer(
            escape_md("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç."),
            reply_markup=get_main_keyboard(user_id)
        )
        return

    # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç (–≤–Ω—É—Ç—Ä–∏ generate_digest –≤ –∫–æ–Ω—Ü–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è mark_posts_as_read)
    digest = await generate_digest(user_id)
    await message.answer(escape_md(digest), reply_markup=get_main_keyboard(user_id))
    # –ó–¥–µ—Å—å post—ã —É–∂–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ => —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î
    # –±–ª–∞–≥–æ–¥–∞—Ä—è –ª–æ–≥–∏–∫–µ –≤ generate_digest –∏ mark_posts_as_read.


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())